//srand(time(NULL));
//time_t start = time(0);

//global vars
/*var max_attemps = 12;
var wordvalue = max_attemps*max_attemps;
var wordsize = 8;

var motus_dic = load_array_dic("motus_eight.dic");
var attempt=0;

var a = motus_dic.D[rand()%motus_dic.size];*/

function a() {
	alert("hello");
}

function get_word_of_size (size,dic) {
	var out = window.document.getElementById("usrin").value;
	if(out.length()!=size || !are_all_char(out, out.length()) || !in_array_dic(out, dic)){
		cout << "Enter a word "<<size<<" characters long:\n";
		cin >> out;
	}
	return out;
}

/*function are_all_char (word,wrdlength) {
	if(wrdlength<=0) return 1;
	return (toupper(word[wrdlength-1])>='A' && toupper(word[wrdlength-1])<='Z')*are_all_char(word,wrdlength-1);
}*/

function correct_letters (word_a,word_b,wrdlength) {
	if(wrdlength<=0) return "";
	var current;
	if(toupper(word_a[wrdlength-1])==toupper(word_b[wrdlength-1])) current = word_a[wrdlength-1];
	else current='-';
	return correct_letters(word_a,word_b,wrdlength-1)+current;
}

function equal_strings (word_a,word_b,wrdlength) {
	if(wrdlength<=0) return 1;
	return (toupper(word_a[wrdlength-1])==toupper(word_b[wrdlength-1]))*equal_strings(word_a,word_b,wrdlength-1);
}


function sub_string (a,i,size) {
	if(size == 0) return "";
	return a[i]+sub_string(a,i+1,size-1);
}

function occurance_lettre (word,ltr) {
	if(word.length()==0) return 0;
	return (toupper(word[0])==toupper(ltr))+occurance_lettre(sub_string(word,1,word.length()-1),ltr);
}
/*
function misplaced_letters (string_a,string_b) {
	var out ="";
	var wi=0;
	while(wi<string_a.length()){
		if(string_a[wi]==b[wi]) {
			string_a = string_a.slice(0,wi)+string_a.slice(wi+1);
			string_b = string_b.slice(0,wi)+string_b.slice(wi+1);
			wi--;
		}
		wi++;
	}

	for(int i=0; i<a.length();i++){
		var c = string_b[i].toLowerCase();
		if(occurance_lettre(out,b[i])) continue;

		int bi_ina = occurance_lettre(a,c);
		int bi_inb = occurance_lettre(b,c);
		for(int i=0;i<Math.min(bi_inb,bi_ina);i++) out += c;
	}
	return out;
}*/

//Dictionary Code
/*function load_array_dic (dictionary){
	var out;
	var word[9];
	ifstream read; read.open(dictionary);
	out.size = 0;
	while(read){
		read.getline(word, 9);
		out.D[out.size++]=word;
	}


	return out;
}*/

//string comparator ab < abc < bc
function leq_string (string_a,string_b,ltr){
	if(ltr == min(string_a.length(),string_b.length())) return 1;
	if(string_a[ltr]<string_b[ltr]) return 1;
	if(string_a[ltr]>string_b[ltr]) return 0;
	return leq_string (string_a,string_b,ltr+1);
}

//Recherche Dicho
function inArray_rec (string,Dictionary,i,j) {
	if(stringe==Dictionary[i]) return 1;
	if(i==j-1) return 0;

	var p = (i+j)/2;
	if(leq_string(Dictionary[p],string,0)) return inArray_rec(string,Dictionary,p,j);
	else return inArray_rec(string,Dictionary,i,p);
}

//Ceci charge la fonction recursive
function in_array_dic (string,Dic) {
	return inArray_rec(string,Dic.D,0,Dic.size);
}